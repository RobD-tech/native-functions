name: Publish

on:
  push:
    branches: ['master', 'acceptance', 'edge']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: branch
      - run: npm config set '//registry.npmjs.org/:_authToken' '${{ secrets.NPM_TOKEN }}'
      - run: npm install -g @betty-blocks/cli @betty-blocks/jaws form-data fs-extra node-fetch@2 shelljs
      - uses: actions/checkout@v2
      - uses: actions/github-script@v6
        with:
          script: |
            const global = '/usr/local/lib/node_modules';
            const cli = `${global}/@betty-blocks/cli/build`;

            const Jaws = require(`${global}/@betty-blocks/jaws`);
            const fetch = require(`${global}/node-fetch`);
            const FormData = require(`${global}/form-data`);
            const fs = require(`${global}/fs-extra`);
            const path = require('path');
            const shell = require(`${global}/shelljs`);

            const run = (cmd) => shell.exec(cmd, {silent: true}).stdout.trim();

            const URL = '${{ secrets.API_URL }}';
            const CONFIG = JSON.parse('${{ secrets.JAWS_SECRETS }}');
            const jaws = Jaws.default.getInstance(CONFIG);
            const zones = CONFIG.services;

            const {
              functionDefinitions,
              stringifyDefinitions,
              zipFunctionDefinitions
            } = require(
              `${global}/@betty-blocks/cli/build/functions/functionDefinitions.js`
            );

            const functionsDir = path.join(run('pwd'), 'functions');
            const functions = functionDefinitions(functionsDir);
            const functionsJson = stringifyDefinitions(functions);

            const appFile = zipFunctionDefinitions(functionsDir);
            const nativeFile = appFile.replace('app', 'native');
            run(`mv ${appFile} ${nativeFile}`);

            const currentBranch = '${{ steps.branch.outputs.branch }}';

            Object.keys(zones).forEach(zone => {
              const url = URL.replace('{ZONE}', zone);
              const jwt = jaws.sign(zone, {application_id: 'native'}).jwt;
              const zoneBranch = zone.match(/(edge|acceptance)/) ? zone : 'master';

              if (currentBranch === zoneBranch) {
                const formData = new FormData();
                formData.append('functions', functionsJson);
                formData.append('options', JSON.stringify({compile: false}));
                formData.append('file', fs.createReadStream(nativeFile));

                fetch(url, {
                  method: 'POST',
                  body: formData,
                  headers: {
                    Authorization: `Bearer ${jwt}`,
                  },
                }).then(response => {
                  console.log(`[${zone.slice(0, 3)}] ${response.status} - ${response.statusText}`);
                });
              }
            });
